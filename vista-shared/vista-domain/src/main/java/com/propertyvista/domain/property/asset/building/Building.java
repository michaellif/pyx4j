/*
 * (C) Copyright Property Vista Software Inc. 2011- All Rights Reserved.
 *
 * This software is the confidential and proprietary information of Property Vista Software Inc. ("Confidential Information"). 
 * You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the license agreement 
 * you entered into with Property Vista Software Inc.
 *
 * This notice and attribution to Property Vista Software Inc. may not be removed.
 *
 * Created on Jan 26, 2011
 * @author michaellif
 * @version $Id$
 */
package com.propertyvista.domain.property.asset.building;

import com.pyx4j.entity.annotations.Detached;
import com.pyx4j.entity.annotations.Editor;
import com.pyx4j.entity.annotations.Editor.EditorType;
import com.pyx4j.entity.annotations.EmbeddedEntity;
import com.pyx4j.entity.annotations.Reference;
import com.pyx4j.entity.annotations.ToString;
import com.pyx4j.entity.annotations.validator.NotNull;
import com.pyx4j.entity.shared.IEntity;
import com.pyx4j.entity.shared.IList;
import com.pyx4j.entity.shared.IPrimitive;

import com.propertyvista.domain.financial.offering.ServiceCatalog;
import com.propertyvista.domain.financial.offering.ServiceItemType;
import com.propertyvista.domain.marketing.Marketing;
import com.propertyvista.domain.media.Media;
import com.propertyvista.domain.property.PropertyManager;
import com.propertyvista.domain.property.PropertyManagerReferenceAdapter;
import com.propertyvista.domain.property.asset.Complex;

//TODO rename to Property?!
public interface Building extends IEntity {

    // TODO: To be auto-generated by system unless user enters his own value. (Can be modified (by accounting)).
    //          It seems that two buttons are required: Validate (on Uniqueness) and Generate (new one).
    @NotNull
    IPrimitive<String> propertyCode();

    @Editor(type = EditorType.suggest)
    @Reference(adapter = PropertyManagerReferenceAdapter.class)
    PropertyManager propertyManager();

    @ToString
    @EmbeddedEntity
    BuildingInfo info();

    @EmbeddedEntity
    BuildingFinancial financial();

    @EmbeddedEntity
    BuildingContactInfo contacts();

    @EmbeddedEntity
    Marketing marketing();

    // there is a drop-down box with create new complex  
    Complex complex();

    @Detached
    // should be loaded in service when necessary!..
    IList<Media> media();

    @Detached
    // should be loaded in service when necessary!..
    ServiceCatalog serviceCatalog();

    // utlitiies included in price and should be EXCLUDED from ServiceCatalog 
    @Detached
    // should be loaded in service when necessary!..
    IList<ServiceItemType> includedUtilities();
}
