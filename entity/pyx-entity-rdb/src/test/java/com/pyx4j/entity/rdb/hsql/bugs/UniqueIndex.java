/*
 * Pyx4j framework
 * Copyright (C) 2008-2013 pyx4j.com.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 * Created on Apr 2, 2014
 * @author vlads
 * @version $Id$
 */
package com.pyx4j.entity.rdb.hsql.bugs;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class UniqueIndex {

    enum DBType {
        HSQL, MySQL, PostgreSql
    }

    public static void main(String[] args) throws Exception {
        Connection con1;

        DBType testDB = DBType.HSQL;
        //testDB = DBType.MySQL;
        //testDB = DBType.PostgreSql;

        switch (testDB) {
        case HSQL: {
            Class.forName("org.hsqldb.jdbcDriver");
            String url = "jdbc:hsqldb:mem:tst_entity";
            String user = "sa";
            String password = "";
            con1 = DriverManager.getConnection(url, user, password);
            con1.setAutoCommit(false);

            //con1.createStatement().executeUpdate("SET DATABASE TRANSACTION CONTROL MVCC");

            // Create test Table
            con1.createStatement()
                    .executeUpdate(
                            "CREATE TABLE test(id bigint generated by default as identity (start with 1), tenant varchar(80), name varchar(64),  CONSTRAINT TEST_PK PRIMARY KEY (id))");
            con1.createStatement().executeUpdate("CREATE UNIQUE INDEX test_idx ON test (tenant, name)");

            con1.commit();
            break;
        }
        case MySQL: {
            Class.forName("com.mysql.jdbc.Driver").newInstance();

            String url = "jdbc:mysql://localhost/tst_entity";
            String user = "tst_entity";
            String password = "tst_entity";
            con1 = DriverManager.getConnection(url, user, password);
            con1.setAutoCommit(false);

            try {
                con1.createStatement().executeUpdate("DROP TABLE test");
            } catch (SQLException e) {
                if (!e.getMessage().contains("Unknown table")) {
                    throw e;
                }
            }

            con1.createStatement().executeUpdate(
                    "CREATE TABLE test(id bigint(20) NOT NULL AUTO_INCREMENT, tenant varchar(80), name varchar(64),  CONSTRAINT TEST_PK PRIMARY KEY (id))");
            con1.createStatement().executeUpdate("CREATE UNIQUE INDEX test_idx ON test (tenant, name)");

            break;
        }
        case PostgreSql: {
            Class.forName("org.postgresql.Driver").newInstance();

            String url = "jdbc:postgresql://localhost/tst_entity";
            String user = "tst_entity";
            String password = "tst_entity";
            con1 = DriverManager.getConnection(url, user, password);
            con1.setAutoCommit(false);

            try {
                con1.createStatement().executeUpdate("DROP TABLE test");
            } catch (SQLException e) {
                if (!e.getMessage().contains("does not exist")) {
                    throw e;
                }
            }
            con1.createStatement().executeUpdate(
                    "CREATE TABLE test(id SERIAL NOT NULL, tenant varchar(80), name varchar(64), CONSTRAINT TEST_PK PRIMARY KEY (id))");
            con1.createStatement().executeUpdate("CREATE UNIQUE INDEX test_idx ON test (tenant, name)");
            con1.commit();

            break;
        }
        default:
            throw new IllegalArgumentException();
        }

        // This Ok
        {
            con1.createStatement().executeUpdate("INSERT INTO test (tenant, name)  VALUES (null, null)");
            con1.createStatement().executeUpdate("INSERT INTO test (tenant, name)  VALUES (null, null)");
            con1.commit();
        }

        // This Ok
        {
            con1.createStatement().executeUpdate("INSERT INTO test (tenant, name)  VALUES (null, 'A')");
            con1.createStatement().executeUpdate("INSERT INTO test (tenant, name)  VALUES (null, 'A')");
            con1.commit();
        }

        // test 
        con1.createStatement().executeUpdate("INSERT INTO test (tenant, name)  VALUES ('1', null)");
        con1.commit();

        con1.createStatement().executeUpdate("INSERT INTO test (tenant, name)  VALUES ('1', null)");
        con1.commit();

        System.out.println("Ok");

    }
}
