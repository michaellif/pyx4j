/*
 * Pyx4j framework
 * Copyright (C) 2008-2011 pyx4j.com.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 * Created on 2012-11-02
 * @author vlads
 */
package com.pyx4j.entity.rdb.hsql.bugs;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

public class HSQLConcurrentRetrieve {

    enum DBType {
        HSQL, MySQL, PostgreSql
    }

    public static void main(String[] args) throws Exception {
        Connection con1;
        Connection con2;

        DBType testDB = DBType.HSQL;
        //testDB = DBType.MySQL;
        //testDB = DBType.PostgreSql;

        switch (testDB) {
        case HSQL: {
            Class.forName("org.hsqldb.jdbcDriver");
            String url = "jdbc:hsqldb:mem:tst_entity";
            String user = "sa";
            String password = "";
            con1 = DriverManager.getConnection(url, user, password);
            con2 = DriverManager.getConnection(url, user, password);
            // Create test Table
            con1.createStatement().executeUpdate(
                    "CREATE TABLE test(id bigint generated by default as identity (start with 1), name varchar(500),  owner bigint, CONSTRAINT TEST_PK PRIMARY KEY (id))");
            break;
        }
        case MySQL: {
            Class.forName("com.mysql.jdbc.Driver").newInstance();

            String url = "jdbc:mysql://localhost/tst_entity";
            String user = "tst_entity";
            String password = "tst_entity";
            con1 = DriverManager.getConnection(url, user, password);
            con2 = DriverManager.getConnection(url, user, password);

            if (false) {
                con1.createStatement().executeUpdate(
                        "CREATE TABLE test(id bigint(20) NOT NULL AUTO_INCREMENT, name varchar(500),  owner bigint(20), CONSTRAINT TEST_PK PRIMARY KEY (id))");
            } else {
                con1.createStatement().executeUpdate("DELETE FROM test");
            }
            break;
        }
        case PostgreSql: {
            Class.forName("org.postgresql.Driver").newInstance();

            String url = "jdbc:postgresql://localhost/tst_entity";
            String user = "tst_entity";
            String password = "tst_entity";
            con1 = DriverManager.getConnection(url, user, password);
            con2 = DriverManager.getConnection(url, user, password);

            if (true) {
                con1.createStatement()
                        .executeUpdate("CREATE TABLE test(id SERIAL NOT NULL, name varchar(500),  owner bigint, CONSTRAINT TEST_PK PRIMARY KEY (id))");
            } else {
                con1.createStatement().executeUpdate("DELETE FROM test");
            }
            break;
        }
        default:
            throw new IllegalArgumentException();
        }

        if (testDB == DBType.HSQL) {
            //con1.createStatement().executeUpdate("SET DATABASE TRANSACTION CONTROL MVCC");
        }

        con1.setAutoCommit(false);
        con1.createStatement().executeUpdate("SET TRANSACTION ISOLATION LEVEL READ COMMITTED");

        con2.setAutoCommit(false);
        con2.createStatement().executeUpdate("SET TRANSACTION ISOLATION LEVEL READ COMMITTED");

        //Setup test data
        con1.createStatement().executeUpdate("INSERT INTO test (name, owner)  VALUES ('1', 1)");
        con1.commit();

        // Insert new data to the table. Should it Block other transactions?
        con1.createStatement().executeUpdate("INSERT INTO test (name, owner)  VALUES ('2', 2)");

        // Test if we can read the data from another transaction
        String sql = "SELECT id, name, owner FROM test  WHERE owner = 1";
        PreparedStatement stmt = con2.prepareStatement(sql, ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
        System.out.println("try to retrive the first row.");
        ResultSet rs = stmt.executeQuery(); // <--  Executions Locks here

        if (rs.next()) {
            System.out.println("Ok");
        } else {
            throw new Error();
        }

    }
}
