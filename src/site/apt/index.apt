~~ @version $Revision$ ($Author$) $Date$
~~ See this file format http://maven.apache.org/guides/mini/guide-apt-format.html

                                    ------------------
                                    Overview
                                    ------------------


pyx

* Overview

    This is the second generation framework we are using for our web applications.

    This framework simplify domain driven application development on GAE with GWT.

    {{{http://pyx4j.com/snapshot/pyx4j/pyx4j-gwt/}Old framework}} is still maintained.

* IEntity

    This is our approach to make data object and its metadata in one declaration.

    We selected this approach because we need

    * Refactoring safe domain

    * The same domain objects in GWT client mode and on server side

    * Type safety using Java 5 generics

    []

---
public interface Car extends IEntity {

    IPrimitive<String> name();

}
...
Car car = EntityFactory.create(Car.class);
---

    Implementation objects are created using bytecode manipulations (Javassist) on server and GWT rebind for client.

    Build-time bytecode enhancement are optional. Implementations can be dynamically created at run-time during development.
We can create Entity implementation classes at build-time so bytecode manipulations can be avoided on production to speed up application start-up. This is the final step and optional for application deployment.


* CComponent(s)

    Forms and data binging detached from DOM objects.


* Interesting alternatives

    * {{{http://code.google.com/p/objectify-appengine/}Objectify-Appengine}}

    * {{{http://code.google.com/p/simpleds/}SimpleDS}}

    * {{{http://code.google.com/p/gwt-ent/}GWT ENT}}

* GWT Compile Report

~    * {{{./incubator/tester/tester-client/soycReport/}GWT Compile Report for 'tester'}}

    * {{{./examples/examples-site/soycReport/}GWT Compile Report for 'examples'}}